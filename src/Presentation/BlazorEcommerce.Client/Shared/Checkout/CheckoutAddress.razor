@inject IAccountService AccountService

<EditForm Model="UserAddress" OnValidSubmit="HandleValidSubmit" class="">
	<DataAnnotationsValidator />
	<ValidationSummary />

	<div class="d-flex justify-content-between align-items-center text-primary fw-bold">
		<h4>Shipping Address</h4>
		<button class="btn btn-outline-success mb-3">Save as default address</button>
	</div>
	<div class="row">
		<div class="col-6 my-2">
			<div class="form-floating">
				<InputText id="firstname" class="form-control" @bind-Value="UserAddress.FirstName" placeholder=""/>
				<label for="firstname" class="fw-bold">First Name</label>
				<ValidationMessage For="@(() => UserAddress.FirstName)"/>
			</div>
		</div>
		<div class="col-6 my-2">
			<div class="form-floating">
				<InputText id="lastname" class="form-control" @bind-Value="UserAddress.LastName" placeholder="Last name"/>
				<label for="lastname" class="fw-bold">Last Name</label>
				<ValidationMessage For="@(() => UserAddress.LastName)"/>
			</div>
		</div>
		<div class ="col-6 my-2">
			<div class="form-floating">
				<InputText id="street" class="form-control" @bind-Value="UserAddress.Street" placeholder="Street"/>
				<label for="street" class="fw-bold">Street</label>
				<ValidationMessage For="@(() => UserAddress.Street)"/>
			</div>
		</div>
		<div class="col-6 my-2">
			<div class="form-floating">
				<InputText id="city" class="form-control" @bind-Value="UserAddress.City" placeholder="City"/>
				<label for="city" class="fw-bold">City</label>
				<ValidationMessage For="@(() => UserAddress.City)"/>
			</div>
		</div>
		<div class="col-6 my-2">
			<div class="form-floating">
				<InputText id="country" class="form-control" @bind-Value="UserAddress.Country" placeholder="Country"/>
				<label for="country" class="fw-bold">Country</label>
				<ValidationMessage For="@(() => UserAddress.Country)"/>
			</div>
		</div>
	</div>
	<div class="d-flex justify-content-between flex-row mt-2">
		<a class="btn btn-outline-primary rounded-2" href="/cart">
			<i class="fa fa-angle-left"></i> Back to cart
		</a>
		<button class="btn btn-primary rounded-2" @onclick="() => MoveStep(2)">
			Go to delivery <i class="fa fa-angle-right"></i>
		</button>
	</div>
</EditForm>

@code {

	[Parameter] public EventCallback<int> Move { set; get; }

	UserAddressModel UserAddress = new();

	protected override async Task OnInitializedAsync()
	{
		UserAddress = await AccountService.GetUserAddressAsync() ?? new UserAddressModel();
	}

	private async Task HandleValidSubmit()
	{
		await AccountService.UpdateUserAddressAsync(UserAddress);
	}

	private void MoveStep(int step)
	{
		Move.InvokeAsync(step);
	}

}