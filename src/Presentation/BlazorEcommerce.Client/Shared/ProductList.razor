@page "/products"
@page "/products/{PageIndex:int}"

@inject IProductService ProductService

@if (ProductResponse is null || ProductResponse.Data.Count == 0)
{
	<p class="text-center">No products found</p>
}
else
{
	<div class="row">
		@foreach (var product in ProductResponse.Data)
		{
			<div class="col-md-3">
				<div class="card mb-4 shadow-sm">
					<img class="card-img-top media-img" src="@product.ImageCover" alt="@product.Name" style="object-fit: contain; width: 100%; height: 300px;">
					<div class="card-body">
						<p class="card-text">@product.Name</p>
						<p class="card-text" style="height: 120px">@product.Description</p>
						<div class="d-flex justify-content-between align-items-center">
							<div class="btn-group">
								<a type="button" class="btn btn-sm btn-outline-success" href="/product/@product.Id">View</a>
								<button type="button" class="btn btn-sm btn-outline-primary">Add to Cart</button>
							</div>
							<small class="price">@product.Price.ToString("C")</small>
						</div>
					</div>
				</div>
			</div>
		}
	</div>

	<div class="mb-1 text-center @(pageCount <= 0 ? "d-none" : "d-block")">
		@for (var i = 1; i <= pageCount; i++)
		{
			<a class="btn @(i == ProductResponse.PageIndex ? "btn-info" : "btn-outline-info") page-selection
			@(i != pageCount ? "me-2" : "me-0")" href="/products/@i">@i</a>
		}
	</div>
}

@code {

	[Parameter] public int PageIndex { get; set; }

	public int? pageCount { get; set; }

	public PaginationToReturn<ProductResponse>? ProductResponse { get; set; }

	protected override async Task OnParametersSetAsync()
	{
		var parameters = new ProductParameters();

		if (PageIndex != 0) parameters.PageIndex = PageIndex;

		ProductResponse = await ProductService.GetProductsAsync(parameters);

		pageCount = ProductResponse?.Count / ProductResponse?.PageSize;

		ProductResponse = await ProductService.GetProductsAsync(parameters);
	}

}