@inject ICartService CartService
@inject IToastService ToastService

@if(Product != null)
{
	<div class="card h-100 shadow-sm border-0">
		<div class="image position-relative" style="cursor: pointer;">
			<div class="d-flex justify-content-center align-items-center" style="height: 370px; background-color: #f8f9fa; border-radius: 8px 8px 0 0;">
				<img style="max-width: 100%; max-height: 100%; object-fit: cover;" src="@Product.ImageCover" alt="@Product.Name" class="w-auto p-2">
			</div>
			<div class="hover-overlay d-flex align-items-center justify-content-center">
				<a class="btn btn-primary me-2" @onclick="UpdateQuantity"><i class="bi bi-cart-dash-fill"></i></a>
				<a href="/product/@Product.Id" class="btn btn-danger"><i class="bi bi-eye-fill"></i></a>
			</div>
		</div>
		<div class="card-body d-flex flex-column">
			<p class="card-text text-primary fw-bold">@Product.Name</p>
			<p class="card-text" style="height: 75px">@Product.Description</p>
		</div>
		<div class="card-body d-flex justify-content-between">
			<span class="text-success fw-bold">@Product.Price.ToString("C")</span>
			<small>
				@if (Product.Quantity > 0)
				{
					<span class="badge bg-success">
						<i class="bi bi-check-circle-fill me-1"></i> In Stock
					</span>
				}
				else
				{
					<span class="badge bg-danger">
						<i class="bi bi-x-circle-fill me-1"></i> Out of Stock
					</span>
				}
			</small>
		</div>
	</div>

}

@code {
	[Parameter] public ProductResponse? Product { get; set; }

	private async Task UpdateQuantity()
	{
		if (Product != null)
		{
			await CartService.AddProductToBasket(Product, 1);

			ToastService.ShowSuccess("Product Added To Cart Successfully");
		}
	}
}
