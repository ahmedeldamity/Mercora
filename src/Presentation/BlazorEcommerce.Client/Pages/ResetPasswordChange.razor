@page "/resetpassword/change/{email}/{token}"
@inject NavigationManager NavigationManager
@inject IAccountService AccountService
@inject IToastService ToastService

@if(string.IsNullOrEmpty(Email) is false && string.IsNullOrEmpty(Token) is false)
{
	<div class="card mx-auto bg-light-subtle rounded-2 shadow-sm p-4 mb-4" style="max-width: 450px;">
		<div class="card-body">
			<h2 class="text-center mb-4 fw-bold">Reset Password</h2>
			<p class="text-center mb-4">Enter a new password below to change your password.</p>

			<EditForm Model="User" OnValidSubmit="ResetPassword">
				<DataAnnotationsValidator />
				<ValidationSummary class="text-danger" />

				<div class="input-group mb-3">
					<InputText type="@newPasswordInputType" class="form-control form-control-lg" @bind-Value="User.NewPassword" placeholder="New password*" />
					<button type="button" class="btn btn-outline-secondary" @onclick="ToggleNewPasswordVisibility">
						<i class="bi @newPasswordIcon" style="font-size: 1.2rem"></i>
					</button>
				</div>

				<div class="input-group mb-4">
					<InputText type="@confirmPasswordInputType" class="form-control form-control-lg" @bind-Value="User.ConfirmPassword" placeholder="Re-enter new password*" />
					<button type="button" class="btn btn-outline-secondary" @onclick="ToggleConfirmPasswordVisibility">
						<i class="bi @confirmPasswordIcon" style="font-size: 1.2rem"></i>
					</button>
				</div>

				<div class="text-center mt-2">
					<button type="submit" class="btn btn-success btn-lg w-100">Reset password</button>
				</div>
			</EditForm>
		</div>
	</div>
}
else
{
	<div class="alert alert-danger text-center">
		<p>
			The password reset link is invalid or has expired. Please request a new password reset link.
		</p>
	</div>
}

@code {

	readonly ResetPassword User = new();

	[Parameter] public string? Email { get; set; }

	[Parameter] public string? Token { get; set; }

	private string newPasswordInputType = "password";
	private string confirmPasswordInputType = "password";
	private string newPasswordIcon = "bi-eye text-danger";
	private string confirmPasswordIcon = "bi-eye text-danger";

	private void ToggleNewPasswordVisibility()
	{
		if (newPasswordInputType == "password")
		{
			newPasswordInputType = "text";
			newPasswordIcon = "bi-eye-slash text-black";
		}
		else
		{
			newPasswordInputType = "password";
			newPasswordIcon = "bi-eye text-danger";
		}
	}

	private void ToggleConfirmPasswordVisibility()
	{
		if (confirmPasswordInputType == "password")
		{
			confirmPasswordInputType = "text";
			confirmPasswordIcon = "bi-eye-slash text-black";
		}
		else
		{
			confirmPasswordInputType = "password";
			confirmPasswordIcon = "bi-eye text-danger";
		}
	}

	private async Task ResetPassword()
	{
		var model = new ResetPassword
		{
			Email = Email!,
			Token = Token!,
			NewPassword = User.NewPassword,
			ConfirmPassword = User.ConfirmPassword
		};

		var user = await AccountService.ResetPassword(model);

		if (user is not null)
		{
			ToastService.ShowSuccess("Password reset successfully.");

			NavigationManager.NavigateTo("/login");
		}
		else
		{
			ToastService.ShowError("Failed to reset password.");
		}

	}

}