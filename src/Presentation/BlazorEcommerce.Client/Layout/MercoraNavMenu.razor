@using Microsoft.AspNetCore.WebUtilities
@inject ICategoryService CategoryService
@inject NavigationManager NavigationManager
@implements IDisposable

@* For small screens *@
<nav class="d-flex justify-content-between align-items-center bg-primary navbar-for-display-toggler">
	<div class="top-row ps-3 navbar navbar-dark">
		<div class="container-fluid">
			<a class="navbar-brand" href="@("products?categoryId=0")" @onclick="() => Change(0)">Mercora</a>
		</div>
	</div>
	<div class="top-row ps-3 navbar navbar-dark">
		<div class="container-fluid">
			<button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu"> @* Toggle for display menu in small pages *@
				<span class="navbar-toggler-icon"></span>
			</button>
		</div>
	</div>
</nav>

@* For small and large screens *@
<nav class="@NavMenuCssClass nav-scrollable bg-primary">
	<nav class="flex-nav">
		<div class="nav-item px-2">
			<NavLink class="nav-link p-3" href="@("products?categoryId=0")" @onclick="() => Change(0)">
				<span class="bi bi-house-door-fill fs-5" aria-hidden="true"></span> Home
			</NavLink>
		</div>
		@foreach (var category in Categories)
		{
			<div class="nav-item px-2">
				<NavLink class="nav-link p-3" href="@($"products?pageIndex={PageIndex}&categoryId={category.Id}")"
				         @onclick="() => Change(category.Id)" Match="NavLinkMatch.Prefix">
					<span class="bi bi-tags-fill fs-5" aria-hidden="true"></span> @category.Name
				</NavLink>
			</div>
		}
	</nav>
</nav>

@code {

	[Parameter] public EventCallback<int> DataChange { set; get; }

	private static List<CategoryResponse> Categories = [];

	private void Change(int categoryId)
	{
		PageIndex = 1;
		DataChange.InvokeAsync(categoryId);
	}

	protected override async Task OnInitializedAsync()
	{
		Categories = await CategoryService.GetAllCategories();
		NavigationManager.LocationChanged += OnLocationChanged;
		ProcessQueryParamsAsync();
	}

	private int PageIndex = 1;

	private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
	{
		ProcessQueryParamsAsync();
		StateHasChanged();
	}

	private void ProcessQueryParamsAsync()
	{
		var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
		var queryParams = QueryHelpers.ParseQuery(uri.Query);

		if (queryParams.ContainsKey("pageIndex") && int.TryParse(queryParams["pageIndex"], out var pageIndex))
			PageIndex = pageIndex;
	}

	public void Dispose()
	{
		NavigationManager.LocationChanged -= OnLocationChanged;
	}

	private bool collapseNavMenu = true;

	private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

	private void ToggleNavMenu()
	{
		collapseNavMenu = !collapseNavMenu;
	}
}